import os
import cv2
import matplotlib.pyplot as plt
import numpy as np
from PL import Image
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_predict
from sklearn.model_selection import cross_val_score

def data(folder):
    image = []
    tag = []
    for file in os.listdir(folder):
        if file.endswith(".jpg"):
           path= os.path.join(folder,file)
           image = cv2.imread(path)
           if image is not None:
              images.append(image)
              tag= int(file.split("_")[-1].split(".")[0])
              tags.append(tag)
    return np.array(images), np.arrat(tags)


# Carpeta con 410 imágenes etiquetadas
X_train, y_train = cargar_datos_etiquetados(carpeta)

# Crear un modelo de regresión logística
modelo_logistico = LogisticRegression()

# Realizar 10-fold cross-validation y obtener las puntuaciones de precisión
puntuaciones_logistica = cross_val_score(modelo_logistico, X_train.reshape(len(X_train), -1), y_train, cv=10)

# Calcular y mostrar la precisión media y la desviación estándar
media_precision_logistica = np.mean(puntuaciones_logistica)
std_precision_logistica = np.std(puntuaciones_logistica)
print(f"Precisión media (Regresión Logística): {media_precision_logistica:.2f}")
print(f"Desviación estándar de la precisión: {std_precision_logistica:.2f}")

# Ajustar (fit) el modelo de regresión logística con los datos de entrenamiento
modelo_logistico.fit(X_train.reshape(len(X_train), -1), y_train)

# Cargar y preprocesar las imágenes para predicción
imagenes_prediccion = []
for archivo in os.listdir(carpeta_2):
    if archivo.endswith(".jpg"):
        ruta = os.path.join(carpeta_2, archivo)
        imagen = cv2.imread(ruta)
        if imagen is not None:
            imagenes_prediccion.append(imagen)

# Realizar predicciones en las imágenes de predicción
X_prediccion = np.array(imagenes_prediccion).reshape(len(imagenes_prediccion), -1)
predicciones = modelo_logistico.predict(X_prediccion)

# Imprimir las predicciones
print("Predicciones:")
print(predicciones)

for imagen, prediccion in zip(imagenes_prediccion, predicciones):
    plt.figure()
    plt.imshow(cv2.cvtColor(imagen, cv2.COLOR_BGR2RGB))  # Asegúrate de convertir de BGR a RGB
    plt.axis('off')  # Para ocultar los ejes
    plt.title(f"Predicción: {prediccion}")
    plt.show()

